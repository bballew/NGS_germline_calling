#!/usr/bin/env python3
# Authors: Shalabh Suman, Bari Ballew

'''HaplotyeCaller module of CGR germline variant calling pipeline
'''


rule HC_call_variants:
    '''Call gVCFs with GATK4
    Runs over each chrom in parallel.
    '''
    input:
        ref = refGenome,
        i1 = refGenome + '.amb',
        i2 = refGenome + '.ann',
        i3 = refGenome + '.bwt',
        i4 = refGenome + '.pac',
        i5 = refGenome + '.sa',
        i6 = refGenome + '.fai',
        i7 = dictionaryFile,
        interval =  outDir + 'split_regions/{chrom}.intervals',
        bam = inDir + '{sample}.bam',
        bai = inDir + '{sample}.bam.bai'
    output:
        gvcf = temp(outDir + 'HaplotypeCaller/called/{chrom}/{sample}.g.vcf'),
        idx = temp(outDir + 'HaplotypeCaller/called/{chrom}/{sample}.g.vcf.idx')
    params:
        e = gatkPath
    benchmark:
        'run_times/HC_call_variants/{chrom}_{sample}.tsv'
    shell:
        '{params.e}gatk --java-options "-Xmx4G" HaplotypeCaller \
            -R {input.ref} \
            -I {input.bam} \
            -ERC GVCF \
            -L {input.interval} \
            -O {output.gvcf} \
            -new-qual \
            -G StandardAnnotation \
            -G StandardHCAnnotation'

rule HC_compress_gvcfs:
    '''Zip and index gVCFs
    '''
    input:
        gvcf = outDir + 'HaplotypeCaller/called/{chrom}/{sample}.g.vcf',
        idx = outDir + 'HaplotypeCaller/called/{chrom}/{sample}.g.vcf.idx'
    output:
        temp(outDir + 'HaplotypeCaller/called/{chrom}/{sample}.g.vcf.gz'),
        temp(outDir + 'HaplotypeCaller/called/{chrom}/{sample}.g.vcf.gz.tbi')
    benchmark:
        'run_times/HC_compress_gvcfs/{chrom}_{sample}.tsv'
    shell:
        'source /etc/profile.d/modules.sh; module load tabix bgzip;'
        'bgzip {input.gvcf}; tabix -p vcf {input.gvcf}.gz'

rule HC_concat_gvcfs:
    '''
    Not clear whether it would be fastest to concat per-chrom gvcfs and
    then genotype, or genotype and then concat.
    '''
    input:
        vcfList = expand(outDir + 'HaplotypeCaller/called/{chrom}/{{sample}}.g.vcf.gz', chrom=chromList),
        indexList = expand(outDir + 'HaplotypeCaller/called/{chrom}/{{sample}}.g.vcf.gz.tbi', chrom=chromList)
    output:
        gz = outDir + 'HaplotypeCaller/called/{sample}_all_chroms.g.vcf.gz'
    params:
        e = gatkPath,
        gvcfList = lambda wildcards, input:" -I ".join(input.vcfList)
    benchmark:
        'run_times/HC_concat_gvcfs/{sample}.tsv'
    shell:
        '{params.e}gatk --java-options "-Xmx4G" GatherVcfs -I {params.gvcfList} -O {output.gz}'

rule HC_index_gvcf:
    input:
        outDir + 'HaplotypeCaller/called/{sample}_all_chroms.g.vcf.gz'
    output:
        tbi = outDir + 'HaplotypeCaller/called/{sample}_all_chroms.g.vcf.gz.tbi'
    benchmark:
        'run_times/HC_index_gvcf/{sample}.tsv'
    shell:
        'source /etc/profile.d/modules.sh; module load tabix;'
        'tabix -p vcf {input}'

rule HC_consolidate_gvcfs:
    '''Split samples by chromosome

    The output of this step includes some files that are in subdirectories
    with unpredictable names.  I've attempted to include them in the input
    of the next rule via glob in the functions below (o5 and o6 in rule
    HC_genotypeGVCFs) but this is still being tested.

    Note that DBImport requires a new or empty directory for 
    --genomicsdb-workspace-path.  Possible issue when resuming a pipeline.
    Snakemake's implicit directory management results in an error when
    DBImport finds that the workspace path already exists (even though it
    seems empty?).  Removing the directory just prior to running DBImport
    seems to solve this problem, but will be problematic on resuming the 
    pipeline.  Added a datetime stamp (dt) to the dir to help address this.
    However, this datetime stamp will need to be overriden if the pipeline
    is stopped and then resumed prior to completion of rule HC_genotypeGVCFs.

    What exactly is GenomicsDB for?  GenotypeGVCFs can only take one single
    input.  GenomicsDB is a method of consolidating gvcfs across samples,
    to provide the input for genotyping.  The alternative is to use 
    CombineGVCFs.  See 
    https://software.broadinstitute.org/gatk/documentation/article?id=11813 
    for more details.
    '''
    input: 
        gvcfList = expand(outDir + "HaplotypeCaller/called/{sample}_all_chroms.g.vcf.gz", sample=sampleList),
        indexList = expand(outDir + "HaplotypeCaller/called/{sample}_all_chroms.g.vcf.gz.tbi", sample=sampleList)
    output:
        o1 = outDir + 'HaplotypeCaller/DBImport/' + dt + '_{chrom}/vcfheader.vcf',
        o2 = outDir + 'HaplotypeCaller/DBImport/' + dt + '_{chrom}/vidmap.json',
        o3 = outDir + 'HaplotypeCaller/DBImport/' + dt + '_{chrom}/callset.json',
        o4 = outDir + 'HaplotypeCaller/DBImport/' + dt + '_{chrom}/__tiledb_workspace.tdb'
    params:
        e = gatkPath,
        gvcfList = lambda wildcards, input:" -V ".join(input.gvcfList),
        interval = '{chrom}',
        db = outDir + 'HaplotypeCaller/DBImport/' + dt + '_{chrom}'
    benchmark:
        'run_times/HC_consolidate_gvcfs/{chrom}.tsv'
    shell:
        'rm -r {params.db}; {params.e}gatk --java-options "-Xmx4G" GenomicsDBImport -V {params.gvcfList} --genomicsdb-workspace-path {params.db} -L {params.interval}'

rule HC_genotype_gvcfs:
    '''Joint genotyping
    '''
    input:
        ref = refGenome,
        interval =  intervalFile,
        o1 = outDir + 'HaplotypeCaller/DBImport/' + dt + '_{chrom}/vcfheader.vcf',
        o2 = outDir + 'HaplotypeCaller/DBImport/' + dt + '_{chrom}/vidmap.json',
        o3 = outDir + 'HaplotypeCaller/DBImport/' + dt + '_{chrom}/callset.json',
        o4 = outDir + 'HaplotypeCaller/DBImport/' + dt + '_{chrom}/__tiledb_workspace.tdb',
        o5 = get_DBImport_path1,
        o6 = get_DBImport_path2
    output:
        vcf = outDir + 'HaplotypeCaller/genotyped/{chrom}.vcf.gz',
        idx = outDir + 'HaplotypeCaller/genotyped/{chrom}.vcf.gz.tbi'
    params:
        e = gatkPath,
        db = outDir + 'HaplotypeCaller/DBImport/' + dt + '_{chrom}',
        t = tempDir + 'HC_genotype_gvcfs/{chrom}/'
    benchmark:
        'run_times/HC_genotype_gvcfs/{chrom}.tsv'
    shell:
        'mkdir -p {params.t}; \
        {params.e}gatk --java-options "-Xmx4G" GenotypeGVCFs \
            -R {input.ref} \
            -V gendb://{params.db} \
            -O {output.vcf} \
            --tmp-dir={params.t} \
            -stand-call-conf 30 \
            -new-qual \
            -G StandardAnnotation \
            -G StandardHCAnnotation'

rule HC_concat_vcfs_bcftools:
    '''
    '''
    input:
        vcfList = expand(outDir + 'HaplotypeCaller/genotyped/{chrom}.vcf.gz', chrom=chromList),
        indexList = expand(outDir + 'HaplotypeCaller/genotyped/{chrom}.vcf.gz.tbi', chrom=chromList)
    output:
        projectVCF = protected(outDir + 'HaplotypeCaller/genotyped/combined/HC_variants.vcf.gz')
        idx = protected(outDir + 'HaplotypeCaller/genotyped/combined/HC_variants.vcf.gz.tbi')
    params:
        tempDir + 'HC_concat_vcfs_bcftools/'
    benchmark:
        'run_times/HC_concat_vcfs_bcftools/HC_variants.tsv'
    shell:
        'source /etc/profile.d/modules.sh; module load bcftools tabix;'
        'mkdir -p {params}; bcftools concat -a {input.vcfList} -Ou | bcftools sort -T {params} -Oz -o {output.projectVCF};'
        'tabix -p vcf {output.projectVCF}'
